<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://cheeou.github.io/devblog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://cheeou.github.io/devblog/" rel="alternate" type="text/html" /><updated>2021-12-25T11:14:43-06:00</updated><id>https://cheeou.github.io/devblog/feed.xml</id><title type="html">cheeou’s devblog</title><entry><title type="html">Basic WebAPI</title><link href="https://cheeou.github.io/devblog/webapi/2021/12/26/webApi.html" rel="alternate" type="text/html" title="Basic WebAPI" /><published>2021-12-26T00:00:00-06:00</published><updated>2021-12-26T00:00:00-06:00</updated><id>https://cheeou.github.io/devblog/webapi/2021/12/26/webApi</id><author><name></name></author><category term="webapi" /><summary type="html">API(Application Programming Interface)? 편리한 기능을 사용자 측에서 이용할 수 있도록 제공해주는 것이다. 예를 들어 유튜브에서 총 재생시간을 알고 싶으면 유튜브 API에서 재생시간 데이터를 가져와서 따로 계산하지 않고도 원하는 데이터를 얻을 수 있는 경우이다. WebAPI 인터넷 환경을 통해 API 기능을 이용할 수 있는 것. 브라우저, 스마트폰, 터미널 등에 여러 프로그램에서 사용되고 원하는 데이터를 API로부터 받는다. HTTP 통신 WebAPI의 개념을 쉽게 이해하려면 인터넷 통신 개념을 알아야한다. 기본적으로 인터넷 환경에서 클라이언트와 서버는 HTTP 통신 규칙아래에 데이터를 주고 받는다. 클라이언트측에서 의뢰를 할때는 HTTP request, 요청된 의뢰에 응답할때는 HTTP response로 전달한다. 서로 데이터를 주고 받을 때는 프로토콜 규칙으로 데이터 포맷 형식을 정해진 규칙에 맞게 정의해야 서로 통신을 제대로 할 수 있다. HTTP 통신 구조 http 요청을 보낼때 어떤 것에,(=url) 어떤 것을 실행(HTTP 메소드: GET[데이터 가져오기], POST[보존,작성]..)할 것인지 정해줘야한다. GET https://abc.abcd.com/user-list parameter: account_name: cheeou https://api.instagram.com/followersList?account_name=cheeou 응답 데이터 (JSON- key,value로 구성되어 있는 정보 형식): {“users”:[{user-object},{user-object}]}</summary></entry><entry><title type="html">git push시 main저장소로 업로드 에러</title><link href="https://cheeou.github.io/devblog/github/2021/12/26/git_pullRequest_merge.html" rel="alternate" type="text/html" title="git push시 main저장소로 업로드 에러" /><published>2021-12-26T00:00:00-06:00</published><updated>2021-12-26T00:00:00-06:00</updated><id>https://cheeou.github.io/devblog/github/2021/12/26/git_pullRequest_merge</id><author><name></name></author><category term="github" /><summary type="html">아래 블로그 참고해서 해결했는데 어떤 순서가 먼저 해결 됐는지 모르겠다. 저장소 만들 때 README를 체크 안하는게 순탄하겠다.. https://gdtbgl93.tistory.com/63 https://waaan.tistory.com/13</summary></entry><entry><title type="html">Vue.js 세팅</title><link href="https://cheeou.github.io/devblog/vuejs/2021/12/24/_07_19_setting_vue_js.html" rel="alternate" type="text/html" title="Vue.js 세팅" /><published>2021-12-24T00:00:00-06:00</published><updated>2021-12-24T00:00:00-06:00</updated><id>https://cheeou.github.io/devblog/vuejs/2021/12/24/_07_19_setting_vue_js</id><author><name></name></author><category term="vuejs" /><summary type="html"></summary></entry><entry><title type="html">Github</title><link href="https://cheeou.github.io/devblog/2021/12/24/github.html" rel="alternate" type="text/html" title="Github" /><published>2021-12-24T00:00:00-06:00</published><updated>2021-12-24T00:00:00-06:00</updated><id>https://cheeou.github.io/devblog/2021/12/24/github</id><author><name></name></author><summary type="html">github</summary></entry><entry><title type="html">Shell이란?</title><link href="https://cheeou.github.io/devblog/shell/2021/12/24/shell.html" rel="alternate" type="text/html" title="Shell이란?" /><published>2021-12-24T00:00:00-06:00</published><updated>2021-12-24T00:00:00-06:00</updated><id>https://cheeou.github.io/devblog/shell/2021/12/24/shell</id><author><name></name></author><category term="shell" /><summary type="html">🌪 shell이란? shell은 사용자의 명령어를 해석하고 운영체제가 알아들을 수 있게 사용자와 커널을 이어주는 다리역할이다. 커널은 사용자가 입력한 셀에 내용을 하드웨어에 직접적으로 명령을 내려준다. 터미널에서 명령을 내리지만 우리 명령어들이 바로 컴퓨터 하드웨어가 바로 이해할 수 있는 언어가 아니다. 그래서 셸은 하드웨어에 직접 명령을 수행할 수 있게 도와준다. 윈도우OS에서는 '명령 프롬포트(CMD)' 맥OS X에서는 '터미널(Terminal)'로 셸을 실행할 수 있다. 우리가 터미널=셸 같은 의미로 쓰이지만 사실 좀 다르다. 셸은 우리가 글자를 입력해서 명령어를 컴퓨터에 전달하는 프로그램이고, 터미널/콘솔은 셸을 실행하기 위해서 텍스트 입력을 받아 컴퓨터에 전달 역할, 글자를 출력해주는 프로그램이다.</summary></entry></feed>