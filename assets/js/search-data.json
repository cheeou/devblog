{
  
    
        "post0": {
            "title": "JS-day1| 핵심개념",
            "content": "우선 왜 배우는지 알자 🤷‍♀️ . JS는 웹 브라우저에서 동작하는 스크립트 언어이다. .",
            "url": "https://cheeou.github.io/devblog/javascript/2021/12/30/js1.html",
            "relUrl": "/javascript/2021/12/30/js1.html",
            "date": " • Dec 30, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Vue.js 세팅",
            "content": "1. About Vue.js . vue project를 생성하기 위해 npm을 이용하여 @vue/cli를 설치한다. | vue-cli는 vue project를 신속하게 생성해 주는 라이브러리이다. | npm은 node.js 기반으로 만들어진 각종 웹 개발 라이브러리 설치 도우미(pakage manager)이다. npm을 이용하려면 node.js 설치는 필수다. . | 웹브라우저는 vue 소스코드를 해석할 수 없다. App.vue에 있던 파일을 index.html로 변환하여 실제 동작을 할 수 있도록 한다. . | . 2. folder&#48324; &#48516;&#47448; . node_modules: 프로젝트에 쓰는 라이브러리들 모음 | src: 소스코드를 담는 폴더 | public: html 파일, 기타 파일 보관 | pakage.json: 라이브러리 버전, 프로젝트 설정 기록 | . 3. vue &#47928;&#48277; . &#9989; : 두 중괄호 안에 data 변수 명으로 가변적인 데이터를 연결해서, 실시간 자동 랜더링(data를 변경하면 변경 사항이 자동으로 html에 실시간에 반영됨)을 할 수 있다. &#10102; html 속성에 바인딩은[ &#39;:&#39; ]로 바인딩 표시(ex :id=&quot;data 변수명&quot;) &#10103; tag 사이 내용에 데이터 바인딩은 . &#9989; v-for 반복 문법 . &lt;tag v-for=&quot;작명 in 반복횟수&quot; :key=&quot;작명&quot;&gt; . &#10104; :key는 반복문쓸 때 증가하는 변수로써(index 개념) 반드시 정의 해주어야함.반복문 돌린 요소를 컴퓨터가 구분하기 위해 사용한다. index개념으로 1씩 증가하여 반복되는 데이터의 변화값을 나타낸다. .",
            "url": "https://cheeou.github.io/devblog/vuejs/2021/12/29/_07_19_setting_vue_js.html",
            "relUrl": "/vuejs/2021/12/29/_07_19_setting_vue_js.html",
            "date": " • Dec 29, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Basic WebAPI",
            "content": "API(Application Programming Interface)? . 편리한 기능을 사용자 측에서 이용할 수 있도록 제공해주는 것이다. 예를 들어 유튜브에서 총 재생시간을 알고 싶으면 유튜브 API에서 재생시간 데이터를 가져와서 따로 계산하지 않고도 원하는 데이터를 얻을 수 있는 경우이다. . WebAPI . 인터넷 환경을 통해 API 기능을 이용할 수 있는 것. 브라우저, 스마트폰, 터미널 등에 여러 프로그램에서 사용되고 원하는 데이터를 API로부터 받는다. . HTTP 통신 . WebAPI의 개념을 쉽게 이해하려면 인터넷 통신 개념을 알아야한다. 기본적으로 인터넷 환경에서 클라이언트와 서버는 HTTP 통신 규칙아래에 데이터를 주고 받는다. 클라이언트측에서 의뢰를 할때는 HTTP request, 요청된 의뢰에 응답할때는 HTTP response로 전달한다. 서로 데이터를 주고 받을 때는 프로토콜 규칙으로 데이터 포맷 형식을 정해진 규칙에 맞게 정의해야 서로 통신을 제대로 할 수 있다. . HTTP 통신 구조 . http 요청을 보낼때 어떤 것에,(=url) 어떤 것을 실행(HTTP 메소드: GET[데이터 가져오기], POST[보존,작성]..)할 것인지 정해줘야한다. . GET https://abc.abcd.com/user-list | parameter: account_name: cheeou https://api.instagram.com/followersList?account_name=cheeou | 응답 데이터 (JSON- key,value로 구성되어 있는 정보 형식): {“users”:[{user-object},{user-object}]} | .",
            "url": "https://cheeou.github.io/devblog/webapi/2021/12/26/webApi.html",
            "relUrl": "/webapi/2021/12/26/webApi.html",
            "date": " • Dec 26, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "git push시 main저장소로 업로드 에러",
            "content": "아래 블로그 참고해서 해결했는데 어떤 순서가 먼저 해결 됐는지 모르겠다. 저장소 만들 때 README를 체크 안하는게 순탄하겠다.. https://gdtbgl93.tistory.com/63 https://waaan.tistory.com/13 .",
            "url": "https://cheeou.github.io/devblog/github/2021/12/26/git_pullRequest_merge.html",
            "relUrl": "/github/2021/12/26/git_pullRequest_merge.html",
            "date": " • Dec 26, 2021"
        }
        
    
  
    
        ,"post4": {
            "title": "Shell이란?",
            "content": "🌪 shell이란? . shell은 사용자의 명령어를 해석하고 운영체제가 알아들을 수 있게 사용자와 커널을 이어주는 다리역할이다. 커널은 사용자가 입력한 셀에 내용을 하드웨어에 직접적으로 명령을 내려준다. 터미널에서 명령을 내리지만 우리 명령어들이 바로 컴퓨터 하드웨어가 바로 이해할 수 있는 언어가 아니다. 그래서 셸은 하드웨어에 직접 명령을 수행할 수 있게 도와준다. 윈도우OS에서는 &#39;명령 프롬포트(CMD)&#39; 맥OS X에서는 &#39;터미널(Terminal)&#39;로 셸을 실행할 수 있다. 우리가 터미널=셸 같은 의미로 쓰이지만 사실 좀 다르다. 셸은 우리가 글자를 입력해서 명령어를 컴퓨터에 전달하는 프로그램이고, 터미널/콘솔은 셸을 실행하기 위해서 텍스트 입력을 받아 컴퓨터에 전달 역할, 글자를 출력해주는 프로그램이다. . Shell의 종류 . 유닉스,리눅스 시스템은 [bash, sh, ksh, csh] 등이 셸 프로그램이고 Windows는 explorer.exe 가 셸이다. 이외에도 cmd.exe가 추가적으로 지원되는데 이는 DOS 호환을 위한 것이다. . sh (Bounce shell): 가장 오랜 기간 유닉스 시스템 표준 셀로 이용됨. |프롬프트: $(일반유저)/#(root유저) | . bash: Bounce shell 변종, 리눅스에서 기본 지원되는 셸로 사용자 계정 생성할때 기본적으로 bash셸으로 지정됨. |프롬프트: # | . csh(C프로그램 스타일 Shell): C언어와 유사한 언어를 사용한다. |프롬프트: % | . ksh(Korn Shell): 유닉스에서 가장 사용되고 있는 셸이다.|프롬프트: $ |",
            "url": "https://cheeou.github.io/devblog/shell/2021/12/24/shell.html",
            "relUrl": "/shell/2021/12/24/shell.html",
            "date": " • Dec 24, 2021"
        }
        
    
  
    
        ,"post5": {
            "title": "Github",
            "content": "github .",
            "url": "https://cheeou.github.io/devblog/2021/12/24/github.html",
            "relUrl": "/2021/12/24/github.html",
            "date": " • Dec 24, 2021"
        }
        
    
  
    
        ,"post6": {
            "title": "Java-01 환경변수 설정 이유",
            "content": "Java 환경 설정이 필요한 이유 . 운영체제는 하드웨어를 사용할 수 있게 해주는 프로그램이다. application도 OS를 거쳐 결국 하드웨어를 통해 동작하게 되는 것인데, 운영체제가 없으면 하드웨어를 사용할 수 없으니 application도 사용이 불가능해지는 것이다. 환경변수를 설정하는 것은 운영체제가 컴퓨터의 어떤 경로에서든지 파일을 인식하도록 하는 것이다. 즉 자바 환경 변수를 등록하는 것은 컴퓨터의 어떤 경로에서든 운영체제가 자바를 인식하도록 하는 것이다. . 환경변수를 설정할 때 JDK의 BIN 디렉토리 경로까지 등록한다. 그 이유는 BIN에 실행파일이 있기 때문이다. 어떤 특정 프로그램을 정상적으로 실행시키려면 많은 파일들이 필요한데, 그 많은 파일들의 적용된 프로그램을 실행시키는 1개이다. 자바에서는 그 실행 파일이 BIN에 있기 때문에 환경변수를 BIN 경로까지 설정하는 것이다. 실행파일은 보통 .exe .com .bat 확장자이다. . javac 명령어는 .java 파일을 .class 파일로 변환시켜주는 컴파일러이다. java 명령어는 컴파일된 .class 파일을 실행하는 명령어이다. . ex) javac Hello.java -&gt; Hello.class -&gt; java Hello -&gt; 클래스 파일이 실행 .",
            "url": "https://cheeou.github.io/devblog/java/2021/12/17/java_%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98.html",
            "relUrl": "/java/2021/12/17/java_%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98.html",
            "date": " • Dec 17, 2021"
        }
        
    
  
    
        ,"post7": {
            "title": "🔮 github vlog 초간단 깃허브 블로그 만들기",
            "content": "⚡️ fastpages로 최단시간으로 깃허브 블로그 만들기 . fastpages는 Github Action 1으로 간단하게 Jeklly blog 포스팅을 할 수있게 도와준다. . 드디어 지킬 블로그에서 겪은 좌절을 fastpages로 치유했다!! (-_-)b . . . 🔮블로그 생성하기 . https://github.com/fastai/fastpages url에 접속 후 README.md에서 Setup Instructions 목차링크를 클릭한다. . | 해당 내용에 on this link를 링크를 클릭하여 https://github.com/fastai/fastpages/generate url로 이동하여 저장소를 생성한다. 📌참고로 fastpage에서 생성한 블로그 url은 https://[github계정이름].github.io/[저장소이름]/ 형식이다. . | 생성한 저장소에서 상단에 Pull requests 탭에 일정 시간이 지나면(약 3분이내)Initial Setup이 하나 업데이트 되어있을 것이다. Before you merge this PR 내용에 순서대로 셋업을 진행한다. ‼️링크 이동할 때는 새창으로 열어주세요. Before you merge this PR 1번 내용에 this utility 링크를 클릭 후 Generate SSH Keys Online 페이지로 이동한다. | SSH-Keygen Oline : RSA | RSA Key Size : 4096 체크를 하면 자동으로 PrivateKey와 Public key가 발행된다. 우선 PrivateKey 내용을 전부 복사 후, Before you merge this PR 2번 내용에 this link 링크를 클릭 후 오른쪽 상단에 New repository secret을 클릭 후, 시크릿 키 Name을 입력하고 (ex. SSH_DEPLOY_KEY) Value에 복사한 PrivateKey를 붙여 넣고 Add secret으로 등록한다. | Before you merge this PR 3번 내용에 this link 링크를 클릭 후 이번엔 Public key 내용을 전부 복사하고 Add deploy key를 눌러 원하는 블로그 타이틀을 Title에 적고, Key에 Public key내용을 붙여넣고 ✅Allow write access 체크 후 Add key로 등록한다. | . | 다시 해당 github 저장소로 돌아가서 Pull requests 탭에 Initial Setup 클릭 후 스크롤을 내려 Merge pull request 클릭 후-&gt; Confirm merge 를 눌러주면 끝! 해당 요청이 완료될 때까지 2분정도 소요가 된다. 처리 상태를 보고 싶다면 상단에 Actions탭에서 진행사항 확인이 가능하다. | 🔮Hit Tracker 만들기 . 🔮Github 잔디 심기 . Footnotes . Github 저장소 기반으로 software 개발 Workflow를 자동화 할 수 있는 도구. &#8617; . |",
            "url": "https://cheeou.github.io/devblog/github%20vlog/2021/12/17/createFastpage.html",
            "relUrl": "/github%20vlog/2021/12/17/createFastpage.html",
            "date": " • Dec 17, 2021"
        }
        
    
  
    
        ,"post8": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://cheeou.github.io/devblog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post9": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://cheeou.github.io/devblog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://cheeou.github.io/devblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://cheeou.github.io/devblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}